# -*- coding: utf-8 -*-
# 杨辉三角

def triangles():
    L = [1]
    while True:
        yield L
        # zip 函数用来创建一个聚合了来自每个可迭代对象中的元素的迭代器。
        # 将参数中的list按照从左到右的顺序重新组合，直到最短的那个list被耗尽时，迭代器将停止迭代
        # 例如 zip([1,2,3],[4,5,6])将返回 [(1,4),(2,5),(3,6)]
        print([0]+L)  # 在上一次中断时的list对象前面增加一个[0]元素
        print(L+[0])  # 在上一次中断时的list对象后面增加一个[0]元素
        print(list(zip([0]+L, L+[0])))
        
        L = [sum(i) for i in zip([0]+L, L+[0])]

# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    results.append(t)
    n = n + 1
    if n == 10:
        break

for t in results:
    print(t)

if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')